import tkinter as tk
from tkinter import ttk, messagebox, simpledialog
from datetime import datetime

class SpeedAuthorityControl:
    def __init__(self, parent, track_config):
        self.parent = parent
        self.track_config = track_config
        
        self.create_speed_authority_controls()
    
    def create_speed_authority_controls(self):
        # Suggested Values Card
        suggested_card = tk.Frame(self.parent, bg="white", relief='raised', bd=2, padx=15, pady=15)
        suggested_card.pack(side='left', fill='both', expand=True, padx=5)
        
        tk.Label(suggested_card, text="Suggested Values", font=("Arial", 16, "bold"), 
                bg="white", fg="#2d2d86").pack(anchor='w', pady=(0, 15))
        
        # Track selection
        input_frame = tk.Frame(suggested_card, bg="white")
        input_frame.pack(fill='x', pady=5)
        
        tk.Label(input_frame, text="Track:", font=("Arial", 12, "bold"), bg="white").grid(row=0, column=0, sticky='w', pady=8)
        self.suggested_track_var = tk.StringVar(value="Green")
        self.suggested_track_dropdown = ttk.Combobox(input_frame, textvariable=self.suggested_track_var, 
                                                   values=["Green", "Red", "Blue"], state="readonly", width=15)
        self.suggested_track_dropdown.grid(row=0, column=1, sticky='w', pady=8, padx=(10, 0))
        
        tk.Label(input_frame, text="Block Number:", font=("Arial", 12, "bold"), bg="white").grid(row=1, column=0, sticky='w', pady=8)
        self.suggested_block_var = tk.StringVar(value="15")
        self.suggested_block_dropdown = ttk.Combobox(input_frame, textvariable=self.suggested_block_var, 
                                                   values=self.track_config.get_available_blocks("Green"), 
                                                   state="readonly", width=15)
        self.suggested_block_dropdown.grid(row=1, column=1, sticky='w', pady=8, padx=(10, 0))
        
        # Display values
        values_frame = tk.Frame(suggested_card, bg="white")
        values_frame.pack(fill='x', pady=15)
        
        speed_frame = tk.Frame(values_frame, bg="white")
        speed_frame.pack(fill='x', pady=8)
        tk.Label(speed_frame, text="Speed:", font=("Arial", 12, "bold"), bg="white").pack(side='left')
        self.suggested_speed_var = tk.StringVar(value="45 mph")
        tk.Label(speed_frame, textvariable=self.suggested_speed_var, 
                font=("Arial", 12, "bold"), bg="white", fg="#4d4dff").pack(side='left', padx=(10, 0))
        
        auth_frame = tk.Frame(values_frame, bg="white")
        auth_frame.pack(fill='x', pady=8)
        tk.Label(auth_frame, text="Authority:", font=("Arial", 12, "bold"), bg="white").pack(side='left')
        self.suggested_auth_var = tk.StringVar(value="3 blocks")
        tk.Label(auth_frame, textvariable=self.suggested_auth_var, 
                font=("Arial", 12, "bold"), bg="white", fg="#4d4dff").pack(side='left', padx=(10, 0))
        
        ttk.Button(suggested_card, text="Fetch All Data", command=self.fetch_all_data, width=15).pack(pady=10)
        
        # Bind track change event
        self.suggested_track_dropdown.bind('<<ComboboxSelected>>', self.on_suggested_track_change)
        
        # Commanded Values Card
        commanded_card = tk.Frame(self.parent, bg="white", relief='raised', bd=2, padx=15, pady=15)
        commanded_card.pack(side='left', fill='both', expand=True, padx=5)
        
        tk.Label(commanded_card, text="Commanded Values", font=("Arial", 16, "bold"), 
                bg="white", fg="#2d2d86").pack(anchor='w', pady=(0, 15))
        
        # Commanded track selection
        cmd_input_frame = tk.Frame(commanded_card, bg="white")
        cmd_input_frame.pack(fill='x', pady=5)
        
        tk.Label(cmd_input_frame, text="Track:", font=("Arial", 12, "bold"), bg="white").grid(row=0, column=0, sticky='w', pady=8)
        self.commanded_track_var = tk.StringVar(value="Green")
        self.commanded_track_dropdown = ttk.Combobox(cmd_input_frame, textvariable=self.commanded_track_var, 
                                                   values=["Green", "Red", "Blue"], state="readonly", width=15)
        self.commanded_track_dropdown.grid(row=0, column=1, sticky='w', pady=8, padx=(10, 0))
        
        # Commanded values with controls
        cmd_values_frame = tk.Frame(commanded_card, bg="white")
        cmd_values_frame.pack(fill='x', pady=15)
        
        # Speed control
        cmd_speed_frame = tk.Frame(cmd_values_frame, bg="white")
        cmd_speed_frame.pack(fill='x', pady=10)
        tk.Label(cmd_speed_frame, text="Speed:", font=("Arial", 12, "bold"), bg="white").pack(side='left')
        self.commanded_speed_var = tk.StringVar(value="45 mph")
        tk.Label(cmd_speed_frame, textvariable=self.commanded_speed_var, 
                font=("Arial", 12, "bold"), bg="white", fg="#4d4dff").pack(side='left', padx=(10, 0))
        ttk.Button(cmd_speed_frame, text="Set Speed", command=self.set_commanded_speed, width=10).pack(side='right', padx=(10, 0))
        
        # Authority control
        cmd_auth_frame = tk.Frame(cmd_values_frame, bg="white")
        cmd_auth_frame.pack(fill='x', pady=10)
        tk.Label(cmd_auth_frame, text="Authority:", font=("Arial", 12, "bold"), bg="white").pack(side='left')
        self.commanded_auth_var = tk.StringVar(value="3 blocks")
        tk.Label(cmd_auth_frame, textvariable=self.commanded_auth_var, 
                font=("Arial", 12, "bold"), bg="white", fg="#4d4dff").pack(side='left', padx=(10, 0))
        ttk.Button(cmd_auth_frame, text="Set Authority", command=self.set_commanded_authority, width=10).pack(side='right', padx=(10, 0))
        
        # Bind commanded track change event
        self.commanded_track_dropdown.bind('<<ComboboxSelected>>', self.on_commanded_track_change)
    
    def on_suggested_track_change(self, event=None):
        track = self.suggested_track_var.get()
        # Update block dropdown for selected track
        blocks = self.track_config.get_available_blocks(track)
        self.suggested_block_dropdown['values'] = blocks
        if blocks:
            self.suggested_block_var.set(blocks[0])
    
    def on_commanded_track_change(self, event=None):
        track = self.commanded_track_var.get()
        # Update commanded values based on track
        track_data = self.track_config.tracks.get(track, {})
        self.commanded_speed_var.set(track_data.get("commanded_speed", "45 mph"))
        self.commanded_auth_var.set(track_data.get("commanded_authority", "3 blocks"))
    
    def fetch_all_data(self):
        track = self.suggested_track_var.get()
        block = self.suggested_block_var.get()
        
        track_data = self.track_config.tracks.get(track, {})
        self.suggested_speed_var.set(track_data.get("suggested_speed", "45 mph"))
        self.suggested_auth_var.set(track_data.get("suggested_authority", "3 blocks"))
        
        # Update commanded values to match
        self.commanded_speed_var.set(track_data.get("commanded_speed", "45 mph"))
        self.commanded_auth_var.set(track_data.get("commanded_authority", "3 blocks"))
        
        messagebox.showinfo("Data Fetched", f"Fetched data for {track} track, Block {block}")
    
    def set_commanded_speed(self):
        new_speed = simpledialog.askfloat("Set Commanded Speed", "Enter new commanded speed (mph):")
        if new_speed is not None:
            self.commanded_speed_var.set(f"{new_speed} mph")
    
    def set_commanded_authority(self):
        new_auth = simpledialog.askinteger("Set Commanded Authority", "Enter new commanded authority (blocks):")
        if new_auth is not None:
            self.commanded_auth_var.set(f"{new_auth} blocks")